module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateClient {
  count: Int!
}

type AggregateOrder {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Client {
  id: ID!
  nome: String!
  telefone: String!
  endereco: String
  cep: String
  complemento: String
  numero: Float
  status_cli: Boolean
  status_ord: Boolean
  status_pay: Boolean
  user: User!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type ClientConnection {
  pageInfo: PageInfo!
  edges: [ClientEdge]!
  aggregate: AggregateClient!
}

input ClientCreateInput {
  id: ID
  nome: String!
  telefone: String!
  endereco: String
  cep: String
  complemento: String
  numero: Float
  status_cli: Boolean
  status_ord: Boolean
  status_pay: Boolean
  user: UserCreateOneInput!
}

input ClientCreateOneInput {
  create: ClientCreateInput
  connect: ClientWhereUniqueInput
}

type ClientEdge {
  node: Client!
  cursor: String!
}

enum ClientOrderByInput {
  id_ASC
  id_DESC
  nome_ASC
  nome_DESC
  telefone_ASC
  telefone_DESC
  endereco_ASC
  endereco_DESC
  cep_ASC
  cep_DESC
  complemento_ASC
  complemento_DESC
  numero_ASC
  numero_DESC
  status_cli_ASC
  status_cli_DESC
  status_ord_ASC
  status_ord_DESC
  status_pay_ASC
  status_pay_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ClientPreviousValues {
  id: ID!
  nome: String!
  telefone: String!
  endereco: String
  cep: String
  complemento: String
  numero: Float
  status_cli: Boolean
  status_ord: Boolean
  status_pay: Boolean
  updatedAt: DateTime!
  createdAt: DateTime!
}

type ClientSubscriptionPayload {
  mutation: MutationType!
  node: Client
  updatedFields: [String!]
  previousValues: ClientPreviousValues
}

input ClientSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ClientWhereInput
  AND: [ClientSubscriptionWhereInput!]
  OR: [ClientSubscriptionWhereInput!]
  NOT: [ClientSubscriptionWhereInput!]
}

input ClientUpdateDataInput {
  nome: String
  telefone: String
  endereco: String
  cep: String
  complemento: String
  numero: Float
  status_cli: Boolean
  status_ord: Boolean
  status_pay: Boolean
  user: UserUpdateOneRequiredInput
}

input ClientUpdateInput {
  nome: String
  telefone: String
  endereco: String
  cep: String
  complemento: String
  numero: Float
  status_cli: Boolean
  status_ord: Boolean
  status_pay: Boolean
  user: UserUpdateOneRequiredInput
}

input ClientUpdateManyMutationInput {
  nome: String
  telefone: String
  endereco: String
  cep: String
  complemento: String
  numero: Float
  status_cli: Boolean
  status_ord: Boolean
  status_pay: Boolean
}

input ClientUpdateOneRequiredInput {
  create: ClientCreateInput
  update: ClientUpdateDataInput
  upsert: ClientUpsertNestedInput
  connect: ClientWhereUniqueInput
}

input ClientUpsertNestedInput {
  update: ClientUpdateDataInput!
  create: ClientCreateInput!
}

input ClientWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  nome: String
  nome_not: String
  nome_in: [String!]
  nome_not_in: [String!]
  nome_lt: String
  nome_lte: String
  nome_gt: String
  nome_gte: String
  nome_contains: String
  nome_not_contains: String
  nome_starts_with: String
  nome_not_starts_with: String
  nome_ends_with: String
  nome_not_ends_with: String
  telefone: String
  telefone_not: String
  telefone_in: [String!]
  telefone_not_in: [String!]
  telefone_lt: String
  telefone_lte: String
  telefone_gt: String
  telefone_gte: String
  telefone_contains: String
  telefone_not_contains: String
  telefone_starts_with: String
  telefone_not_starts_with: String
  telefone_ends_with: String
  telefone_not_ends_with: String
  endereco: String
  endereco_not: String
  endereco_in: [String!]
  endereco_not_in: [String!]
  endereco_lt: String
  endereco_lte: String
  endereco_gt: String
  endereco_gte: String
  endereco_contains: String
  endereco_not_contains: String
  endereco_starts_with: String
  endereco_not_starts_with: String
  endereco_ends_with: String
  endereco_not_ends_with: String
  cep: String
  cep_not: String
  cep_in: [String!]
  cep_not_in: [String!]
  cep_lt: String
  cep_lte: String
  cep_gt: String
  cep_gte: String
  cep_contains: String
  cep_not_contains: String
  cep_starts_with: String
  cep_not_starts_with: String
  cep_ends_with: String
  cep_not_ends_with: String
  complemento: String
  complemento_not: String
  complemento_in: [String!]
  complemento_not_in: [String!]
  complemento_lt: String
  complemento_lte: String
  complemento_gt: String
  complemento_gte: String
  complemento_contains: String
  complemento_not_contains: String
  complemento_starts_with: String
  complemento_not_starts_with: String
  complemento_ends_with: String
  complemento_not_ends_with: String
  numero: Float
  numero_not: Float
  numero_in: [Float!]
  numero_not_in: [Float!]
  numero_lt: Float
  numero_lte: Float
  numero_gt: Float
  numero_gte: Float
  status_cli: Boolean
  status_cli_not: Boolean
  status_ord: Boolean
  status_ord_not: Boolean
  status_pay: Boolean
  status_pay_not: Boolean
  user: UserWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ClientWhereInput!]
  OR: [ClientWhereInput!]
  NOT: [ClientWhereInput!]
}

input ClientWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Long

type Mutation {
  createClient(data: ClientCreateInput!): Client!
  updateClient(data: ClientUpdateInput!, where: ClientWhereUniqueInput!): Client
  updateManyClients(data: ClientUpdateManyMutationInput!, where: ClientWhereInput): BatchPayload!
  upsertClient(where: ClientWhereUniqueInput!, create: ClientCreateInput!, update: ClientUpdateInput!): Client!
  deleteClient(where: ClientWhereUniqueInput!): Client
  deleteManyClients(where: ClientWhereInput): BatchPayload!
  createOrder(data: OrderCreateInput!): Order!
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateManyOrders(data: OrderUpdateManyMutationInput!, where: OrderWhereInput): BatchPayload!
  upsertOrder(where: OrderWhereUniqueInput!, create: OrderCreateInput!, update: OrderUpdateInput!): Order!
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteManyOrders(where: OrderWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Order {
  id: ID!
  client: Client!
  descricao: String!
  valor: Float!
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type OrderConnection {
  pageInfo: PageInfo!
  edges: [OrderEdge]!
  aggregate: AggregateOrder!
}

input OrderCreateInput {
  id: ID
  client: ClientCreateOneInput!
  descricao: String!
  valor: Float!
  status: Status!
}

type OrderEdge {
  node: Order!
  cursor: String!
}

enum OrderOrderByInput {
  id_ASC
  id_DESC
  descricao_ASC
  descricao_DESC
  valor_ASC
  valor_DESC
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type OrderPreviousValues {
  id: ID!
  descricao: String!
  valor: Float!
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type OrderSubscriptionPayload {
  mutation: MutationType!
  node: Order
  updatedFields: [String!]
  previousValues: OrderPreviousValues
}

input OrderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrderWhereInput
  AND: [OrderSubscriptionWhereInput!]
  OR: [OrderSubscriptionWhereInput!]
  NOT: [OrderSubscriptionWhereInput!]
}

input OrderUpdateInput {
  client: ClientUpdateOneRequiredInput
  descricao: String
  valor: Float
  status: Status
}

input OrderUpdateManyMutationInput {
  descricao: String
  valor: Float
  status: Status
}

input OrderWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  client: ClientWhereInput
  descricao: String
  descricao_not: String
  descricao_in: [String!]
  descricao_not_in: [String!]
  descricao_lt: String
  descricao_lte: String
  descricao_gt: String
  descricao_gte: String
  descricao_contains: String
  descricao_not_contains: String
  descricao_starts_with: String
  descricao_not_starts_with: String
  descricao_ends_with: String
  descricao_not_ends_with: String
  valor: Float
  valor_not: Float
  valor_in: [Float!]
  valor_not_in: [Float!]
  valor_lt: Float
  valor_lte: Float
  valor_gt: Float
  valor_gte: Float
  status: Status
  status_not: Status
  status_in: [Status!]
  status_not_in: [Status!]
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
}

input OrderWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  client(where: ClientWhereUniqueInput!): Client
  clients(where: ClientWhereInput, orderBy: ClientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Client]!
  clientsConnection(where: ClientWhereInput, orderBy: ClientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ClientConnection!
  order(where: OrderWhereUniqueInput!): Order
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order]!
  ordersConnection(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

enum Status {
  AGUARDANDO
  EXECUTANDO
  CONCLUIDO
  CANCELADO
}

type Subscription {
  client(where: ClientSubscriptionWhereInput): ClientSubscriptionPayload
  order(where: OrderSubscriptionWhereInput): OrderSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  nome: String!
  email: String!
  senha: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  nome: String!
  email: String!
  senha: String!
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  nome_ASC
  nome_DESC
  email_ASC
  email_DESC
  senha_ASC
  senha_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  nome: String!
  email: String!
  senha: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  nome: String
  email: String
  senha: String
}

input UserUpdateInput {
  nome: String
  email: String
  senha: String
}

input UserUpdateManyMutationInput {
  nome: String
  email: String
  senha: String
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  nome: String
  nome_not: String
  nome_in: [String!]
  nome_not_in: [String!]
  nome_lt: String
  nome_lte: String
  nome_gt: String
  nome_gte: String
  nome_contains: String
  nome_not_contains: String
  nome_starts_with: String
  nome_not_starts_with: String
  nome_ends_with: String
  nome_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  senha: String
  senha_not: String
  senha_in: [String!]
  senha_not_in: [String!]
  senha_lt: String
  senha_lte: String
  senha_gt: String
  senha_gte: String
  senha_contains: String
  senha_not_contains: String
  senha_starts_with: String
  senha_not_starts_with: String
  senha_ends_with: String
  senha_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    